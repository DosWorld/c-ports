/****************************************************************************
 *  int.h: part of the C port of Intel's ISIS-II plm80                      *
 *  The original ISIS-II application is Copyright Intel                     *
 *                                                                          *
 *  Re-engineered to C by Mark Ogden <mark.pm.ogden@btinternet.com>         *
 *                                                                          *
 *  It is released for academic interest and personal use only              *
 ****************************************************************************/
#pragma once
/* intermediate file tokens */
/* after lexer */
enum {
    T1_LINEINFO    = 0,
    T1_SYNTAXERROR = 1,
    T1_TOKENERROR  = 2,
    T1_LIST        = 3,
    T1_NOLIST      = 4,
    T1_CODE        = 5,
    T1_NOCODE      = 6,
    T1_EJECT       = 7,
    T1_INCLUDE     = 8,
    T1_STMTCNT     = 9,
    T1_LABELDEF    = 10,
    T1_LOCALLABEL  = 11,
    T1_JMP         = 12,
    T1_JMPFALSE    = 13,
    T1_PROCEDURE   = 14,
    T1_SCOPE       = 15,
    T1_END         = 16,
    T1_DO          = 17,
    T1_DOLOOP      = 18,
    T1_WHILE       = 19,
    T1_CASE        = 20,
    T1_CASELABEL   = 21,
    T1_IF          = 22,
    T1_STATEMENT   = 23,
    T1_CALL        = 24,
    T1_RETURN      = 25,
    T1_GO          = 26,
    T1_GOTO        = 27,
    T1_SEMICOLON   = 28,
    T1_ENABLE      = 29,
    T1_DISABLE     = 30,
    T1_HALT        = 31,
    T1_EOF         = 32,
    T1_AT          = 33,
    T1_INITIAL     = 34,
    T1_DATA        = 35,
    T1_IDENTIFIER  = 36,
    T1_NUMBER      = 37,
    T1_STRING      = 38,
    T1_PLUSSIGN    = 39,
    T1_MINUSSIGN   = 40,
    T1_PLUS        = 41,
    T1_MINUS       = 42,
    T1_STAR        = 43,
    T1_SLASH       = 44,
    T1_MOD         = 45,
    T1_COLONEQUALS = 46,
    T1_AND         = 47,
    T1_OR          = 48,
    T1_XOR         = 49,
    T1_NOT         = 50,
    T1_LT          = 51,
    T1_LE          = 52,
    T1_EQ          = 53,
    T1_NE          = 54,
    T1_GE          = 55,
    T1_GT          = 56,
    T1_COMMA       = 57,
    T1_LPAREN      = 58,
    T1_RPAREN      = 59,
    T1_PERIOD      = 60,
    T1_TO          = 61,
    T1_BY          = 62,
    T1_INVALID     = 63,
    T1_MODULE      = 64,
    T1_XREFUSE     = 65,
    T1_XREFDEF     = 66,
    T1_EXTERNAL    = 67
};

/* lex tokens */
enum {
    L_IDENTIFIER   = 0,
    L_NUMBER       = 1,
    L_STRING       = 2,
    L_PLUSSIGN     = 3,
    L_MINUSSIGN    = 4,
    L_STAR         = 5,
    L_SLASH        = 6,
    L_MOD          = 7,
    L_PLUS         = 8,
    L_MINUS        = 9,
    L_AND          = 10,
    L_OR           = 11,
    L_XOR          = 12,
    L_NOT          = 13,
    L_14           = 14,
    L_LT           = 15,
    L_LE           = 16,
    L_EQ           = 17,
    L_NE           = 18,
    L_GE           = 19,
    L_GT           = 20,
    L_COLON_EQUALS = 21,
    L_COLON        = 22,
    L_SEMICOLON    = 23,
    L_PERIOD       = 24,
    L_LPAREN       = 25,
    L_RPAREN       = 26,
    L_COMMA        = 27,
    L_CALL         = 28,
    L_DECLARE      = 29,
    L_DISABLE      = 30,
    L_DO           = 31,
    L_ENABLE       = 32,
    L_END          = 33,
    L_GO           = 34,
    L_GOTO         = 35,
    L_HALT         = 36,
    L_IF           = 37,
    L_PROCEDURE    = 38,
    L_RETURN       = 39,
    L_ADDRESS      = 40,
    L_AT           = 41,
    L_BASED        = 42,
    L_BYTE         = 43,
    L_DATA         = 44,
    L_EXTERNAL     = 45,
    L_INITIAL      = 46,
    L_INTERRUPT    = 47,
    L_LABEL        = 48,
    L_LITERALLY    = 49,
    L_PUBLIC       = 50,
    L_REENTRANT    = 51,
    L_STRUCTURE    = 52,
    L_BY           = 53,
    L_CASE         = 54,
    L_ELSE         = 55,
    L_EOF          = 56,
    L_THEN         = 57,
    L_TO           = 58,
    L_WHILE        = 59
};

/* T2 codes */
enum {
    T2_LT          = 0,
    T2_LE          = 1,
    T2_NE          = 2,
    T2_EQ          = 3,
    T2_GE          = 4,
    T2_GT          = 5,
    T2_ROL         = 6,
    T2_ROR         = 7,
    T2_SCL         = 8,
    T2_SCR         = 9,
    T2_SHL         = 10,
    T2_SHR         = 11,
    T2_JMPFALSE    = 12,
    T2_DOUBLE      = 18,
    T2_PLUSSIGN    = 19,
    T2_MINUSSIGN   = 20,
    T2_STAR        = 21,
    T2_SLASH       = 22,
    T2_MOD         = 23,
    T2_AND         = 24,
    T2_OR          = 25,
    T2_XOR         = 26,
    T2_BASED       = 27,
    T2_BYTEINDEX   = 28,
    T2_WORDINDEX   = 29,
    T2_MEMBER      = 30,
    T2_UNARYMINUS  = 31,
    T2_NOT         = 32,
    T2_LOW         = 33,
    T2_HIGH        = 34,
    T2_ADDRESSOF   = 35,
    T2_PLUS        = 36,
    T2_MINUS       = 37,
    T2_LT_VAL      = 38,    // value forms of conditionals
    T2_LE_VAL      = 39,
    T2_NE_VAL      = 40,
    T2_EQ_VAL      = 41,
    T2_GE_VAL      = 42,
    T2_GT_VAL      = 43,
    T2_44          = 44,
    T2_51          = 51,
    T2_56          = 56,
    T2_TIME        = 57,
    T2_STKBARG     = 58,
    T2_STKWARG     = 59,
    T2_DEC         = 60,
    T2_COLONEQUALS = 61,
    T2_OUTPUT      = 62,
    T2_CASEBLOCK   = 63,
    T2_STKARG      = 64,
    T2_65          = 65,
    T2_MOVE        = 69,
    T2_RETURNBYTE  = 71,
    T2_RETURNWORD  = 72,
    T2_RETURN      = 73,
    T2_ADDW        = 130,
    T2_BEGMOVE     = 131,
    T2_CALL        = 132,
    T2_CALLVAR     = 133,
    T2_SETSTMTNO   = 134,
    T2_PROCEDURE   = 135,
    T2_LOCALLABEL  = 136,
    T2_CASELABEL   = 137,
    T2_LABELDEF    = 138,
    T2_INPUT       = 139,
    T2_GOTO        = 140,
    T2_JMP         = 141,
    T2_JNC         = 142,
    T2_JNZ         = 143,
    T2_SIGN        = 144,
    T2_ZERO        = 145,
    T2_PARITY      = 146,
    T2_CARRY       = 147,
    T2_DISABLE     = 148,
    T2_ENABLE      = 149,
    T2_HALT        = 150,
    T2_STMTCNT     = 151,
    T2_LINEINFO    = 152,
    T2_MODULE      = 153,
    T2_SYNTAXERROR = 154,
    T2_TOKENERROR  = 155,
    T2_EOF         = 156,
    T2_LIST        = 157,
    T2_NOLIST      = 158,
    T2_CODE        = 159,
    T2_NOCODE      = 160,
    T2_EJECT       = 161,
    T2_INCLUDE     = 162,
    T2_ERROR       = 163,
    T2_SETADDR     = 164,
    T2_IDENTIFIER  = 172,
    T2_NUMBER      = 173,
    T2_BIGNUMBER   = 174,
    T2_STACKPTR    = 181,
    T2_SEMICOLON   = 182,
    T2_OPTBACKREF  = 183,
    T2_CASE        = 184,
    T2_ENDCASE     = 185,
    T2_ENDPROC     = 186,
    T2_LENGTH      = 187,
    T2_LAST        = 188,
    T2_SIZE        = 189,
    T2_BEGCALL     = 190,
    T2_254         = 254
};

/* ICodes */
enum {
    I_MARKER      = 0,
    I_IDENTIFIER  = 1,
    I_NUMBER      = 2,
    I_PLUSSIGN    = 3,
    I_MINUSSIGN   = 4,
    I_PLUS        = 5,
    I_MINUS       = 6,
    I_STAR        = 7,
    I_SLASH       = 8,
    I_MOD         = 9,
    I_AND         = 10,
    I_OR          = 11,
    I_XOR         = 12,
    I_NOT         = 13,
    I_LT          = 14,
    I_LE          = 15,
    I_EQ          = 16,
    I_NE          = 17,
    I_GE          = 18,
    I_GT          = 19,
    I_ADDRESSOF   = 20,
    I_UNARYMINUS  = 21,
    I_STACKPTR    = 22,
    I_INPUT       = 23,
    I_OUTPUT      = 24,
    I_CALL        = 25,
    I_CALLVAR     = 26,
    I_BYTEINDEX   = 27,
    I_WORDINDEX   = 28,
    I_COLONEQUALS = 29,
    I_MEMBER      = 30,
    I_BASED       = 31,
    I_CARRY       = 32,
    I_DEC         = 33,
    I_DOUBLE      = 34,
    I_HIGH        = 35,
    I_LAST        = 36,
    I_LENGTH      = 37,
    I_LOW         = 38,
    I_MOVE        = 39,
    I_PARITY      = 40,
    I_ROL         = 41,
    I_ROR         = 42,
    I_SCL         = 43,
    I_SCR         = 44,
    I_SHL         = 45,
    I_SHR         = 46,
    I_SIGN        = 47,
    I_SIZE        = 48,
    I_TIME        = 49,
    I_ZERO        = 50
};

/* AT Icodes */
enum {
    ATI_AHDR   = 0,
    ATI_DHDR   = 1,
    ATI_2      = 2,
    ATI_STRING = 3,
    ATI_DATA   = 4,
    ATI_END    = 5,
    ATI_EOF    = 6
};

/* CF codes */
enum {
    CF_3       = 3,
    CF_POP     = 4,
    CF_XTHL    = 5,
    CF_6       = 6,
    CF_7       = 7,
    CF_XCHG    = 14,
    CF_MOVRPM  = 16,
    CF_MOVLRM  = 18,
    CF_MOVMRPR = 19,
    CF_MOVMLR  = 20,
    CF_DW      = 21,
    CF_SPHL    = 22,
    CF_PUSH    = 23,
    CF_INX     = 24,
    CF_DCX     = 25,
    CF_DCXH    = 26,
    CF_RET     = 27,
    CF_SHLD    = 59,
    CF_STA     = 60,
    CF_MOVMRP  = 62,
    CF_67      = 67,
    CF_68      = 68,
    CF_DELAY   = 97,
    CF_MOVE_HL = 103,
    CF_MOVLRHR = 110,
    CF_MOVHRLR = 113,
    CF_MOVHRM  = 114,
    CF_MOVMHR  = 115,
    CF_INXSP   = 116,
    CF_DCXSP   = 117,
    CF_JMPTRUE = 118,
    CF_134     = 134,
    CF_EI      = 149,
    CF_171     = 171,
    CF_174     = 174
};

/* expression parse states */
enum {
    E_EXPRESSION,
    E_EMBED,
    E_COLONEQUALS,
    E_OPERATOR,
    E_UNARY,
    E_PRIMARY,
    E_RPAREN,
    E_ADDRESSOF,
    E_LOCREF,
    E_DOTVAR,
    E_MEMBERSPEC,
    E_VARREF,
    E_DATAREF,
    E_DOT,
    E_MEMBER,
    E_ARGLIST,
    E_FUNCTION,
    E_BUILTIN,
    E_CALLVAR,
    E_SUBSCRIPT,
    E_ENDSUBSCRIPT
};

enum { F_EXPRITEM = 0x80, F_BINOP = 0x40, F_PASSTHROUGH = 0x20 };

enum { LOC_REG = 8, LOC_STACK = 10, LOC_MEM = 4, LOC_SPECIAL = 9 };